```{r, warning=FALSE}
library(readr)
library(dplyr)
library(purrr)
library(tibble)
yr1 <- read_csv("/Users/katrinawang/intCRT/data-raw/LONGYR1_20SAMP_OPEN.csv")
yr2 <- read_csv("/Users/katrinawang/intCRT/data-raw/LONGYR2_20SAMP_OPEN.csv")
yr3 <- read_csv("/Users/katrinawang/intCRT/data-raw/LONGYR3_20SAMP_OPEN.csv")
```

# Step 1: select who were HIV-neg start + followed over time for HIV infection
```{r}
# YR1: baseline participants, HIV-negative, incidence cohort
yr1_incident <- yr1 |>
  filter(hiv_status_current == "HIV-uninfected",
         incidence_cohort == "Yes")

id_incident <- yr1_incident$de_subj_idC

# YR2: late entrants, baseline survey & HIV-negative
yr2_baseline <- yr2 |>
  filter(survey == "BHS", hiv_status_current == "HIV-uninfected")

id_late <- yr2_baseline$de_subj_idC

# Combine eligible IDs
id_valid <- unique(c(id_incident, id_late))

# Subset YR2 and YR3 to only valid participants, excluding refusals
yr2_incident <- yr2 |>
  filter(de_subj_idC %in% id_valid,
         hiv_status_current != "Refused HIV testing")

yr3_incident <- yr3 |>
  filter(de_subj_idC %in% id_valid,
         hiv_status_current != "Refused HIV testing")
```

# Step 2: create reduced dataframes for BHS, AHS1 and AHS2
```{r}
keep_cols <- c("de_subj_idC", "community_rndmN","pair_rndmN","interview_days",
               "survey","hiv_status_current","prev_hivresult","prev_hivresult_days",
               "random_arm","gender","age_at_interview","marital_status","education","alcohol_lastsex") 

# BHS
yr1_sub <- yr1_incident[, keep_cols, drop = FALSE]
yr2_sub <- yr2_incident[, keep_cols, drop = FALSE]

bhs_df <- bind_rows(
  yr1_sub |> filter(survey == "BHS", de_subj_idC %in% id_valid),
  yr2_sub |> filter(survey == "BHS", de_subj_idC %in% id_valid)
)


# df for AHS-1
cols_AHS1 <- c("de_subj_idC", "community_rndmN", "pair_rndmN",
               "interview_days", "survey", "hiv_status_current",
               "prev_hivresult", "prev_hivresult_days")

yr1_AHS1 <- yr1_incident[, cols_AHS1, drop = FALSE]
yr2_AHS1 <- yr2_incident[, cols_AHS1, drop = FALSE]

AHS1_df <- bind_rows(
  yr1_AHS1 |> filter(survey == "AHS-1", de_subj_idC %in% id_valid),
  yr2_AHS1 |> filter(survey == "AHS-1", de_subj_idC %in% id_valid)
)

names(AHS1_df)[names(AHS1_df) %in%
  c("interview_days", "hiv_status_current", "prev_hivresult", "prev_hivresult_days")] <-
  c("fu1_interview_days", "fu1_hiv_status_current", "fu1_prev_hivresult", "fu1_prev_hivresult_days")


# df for AHS-2
cols_AHS2 <- c("de_subj_idC", "community_rndmN", "pair_rndmN",
               "interview_days", "survey", "hiv_status_current",
               "prev_hivresult", "prev_hivresult_days")

AHS2_df <- yr3_incident[, cols_AHS2, drop = FALSE] |>
  filter(survey == "AHS-2", de_subj_idC %in% id_valid)

names(AHS2_df)[names(AHS2_df) %in%
  c("interview_days", "hiv_status_current", "prev_hivresult", "prev_hivresult_days")] <-
  c("fu2_interview_days", "fu2_hiv_status_current", "fu2_prev_hivresult", "fu2_prev_hivresult_days")

```

# Step 3: Merge the dataset
```{r}
merged_df <- merge(bhs_df, AHS1_df, by = "de_subj_idC", all.x = TRUE)
merged_df <- merge(merged_df, AHS2_df, by = "de_subj_idC", all.x = TRUE)

# Keep only relevant columns
merged_df <- merged_df[, c("de_subj_idC",
                           "hiv_status_current",
                           "fu1_hiv_status_current",
                           "fu1_interview_days",
                           "fu1_prev_hivresult",
                           "fu1_prev_hivresult_days",
                           "fu2_hiv_status_current",
                           "fu2_interview_days",
                           "fu2_prev_hivresult",
                           "fu2_prev_hivresult_days")]

# Flag IDs not in BHS
extra_ids <- setdiff(unique(c(AHS1_df$de_subj_idC, AHS2_df$de_subj_idC)), bhs_df$de_subj_idC)
merged_df$flag_not_in_BHS <- merged_df$de_subj_idC %in% extra_ids

```

# Step 4: Applying the function created in dummy data
```{r}
#function
calculate_interval <- function(hiv_status_current, fu1_hiv_status_current, fu2_hiv_status_current,
                               fu1_interview_days, fu1_prev_hivresult, fu1_prev_hivresult_days,
                               fu2_interview_days, fu2_prev_hivresult, fu2_prev_hivresult_days) {
  times <- c(0, fu1_interview_days, fu1_prev_hivresult_days, fu2_interview_days, fu2_prev_hivresult_days)
  status <- c(hiv_status_current, fu1_hiv_status_current, fu1_prev_hivresult, fu2_hiv_status_current, fu2_prev_hivresult)

  df <- tibble(time = times, result = status) |>
    filter(!is.na(time), !is.na(result)) |>
    filter(result != "Refused HIV testing") |>
    filter(time >= 0)

  # latest negative
  neg_times <- df |> 
    filter(result %in% c("HIV-uninfected", "NEG")) |> 
    pull(time)
  left <- if (length(neg_times) > 0) max(neg_times) else NA

  # earliest positive
  pos_times <- df |> 
    filter(result %in% c("HIV-infected", "POS")) |> pull(time)
  right <- if (length(pos_times) > 0) min(pos_times) else Inf

  tibble(left = left, right = right)
}

# Apply function across rows (exclude ID, then add back)
intervals <- merged_df |>
  select(hiv_status_current, fu1_hiv_status_current, fu2_hiv_status_current,
         fu1_interview_days, fu1_prev_hivresult, fu1_prev_hivresult_days,
         fu2_interview_days, fu2_prev_hivresult, fu2_prev_hivresult_days) |>
  pmap_dfr(calculate_interval)

final_df <- bind_cols(merged_df, intervals)

# Clean up a little bit..
final_df <- final_df |>
  filter(!(left == 0 & right == Inf)) |>
  filter(left <= right | is.infinite(right)) |>
  mutate(across(where(is.character), ~na_if(., "")))
nrow(final_df) 

```


